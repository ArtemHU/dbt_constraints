{'raw_sql': "/*\n    Simulate a query for the current year sales orders\n    This demonstrates some of the Snowflake specific options\n*/\n\n{{ config(\n    materialized='incremental',\n    unique_key='INTEGRATION_ID',\n    transient=false,\n    cluster_by=['ROUND(L_ORDERKEY, -4)']\n    ) \n}}\n\nSELECT \n  LINEITEM.*,\n  LKP_EXCHANGE_RATES.CONVERSION_RATE AS EUR_CONVERSION_RATE,\n  {{ surrogate_key(['L_ORDERKEY', 'L_LINENUMBER']) }} AS INTEGRATION_ID\nFROM {{ source('TPC_H', 'LINEITEM') }} LINEITEM\nJOIN {{ source('TPC_H', 'ORDERS') }} ORDERS ON L_ORDERKEY = O_ORDERKEY\nLEFT OUTER JOIN {{ ref('LKP_EXCHANGE_RATES') }} LKP_EXCHANGE_RATES ON\n  LKP_EXCHANGE_RATES.FROM_CURRENCY = 'USD'\n  AND LKP_EXCHANGE_RATES.TO_CURRENCY = 'EUR'\n  AND LKP_EXCHANGE_RATES.DAY_DT = O_ORDERDATE\n\n{% if is_incremental() %} \n -- this filter will only be applied on an incremental run\n-- the filter uses a global variable to know how many days to reprocess\nWHERE L_SHIPDATE >= \n    DATEADD(\n      DAY, \n      -{{ var('prune_days') }}, \n      ( SELECT DATE_TRUNC('DAY', MAX(L_SHIPDATE)) FROM {{ this }} )\n    )\n  OR O_ORDERSTATUS = 'O' \n{% endif %}", 'resource_type': 'model', 'depends_on': {'macros': ['macro.snowflake_demo.surrogate_key', 'macro.dbt.is_incremental', 'macro.dbt_snow_mask.apply_masking_policy'
        ], 'nodes': ['source.snowflake_demo.TPC_H.LINEITEM', 'source.snowflake_demo.TPC_H.ORDERS', 'model.snowflake_demo.LKP_EXCHANGE_RATES'
        ]
    }, 'config': {'enabled': True, 'alias': None, 'schema': None, 'database': None, 'tags': ['Presentation_Layer'
        ], 'meta': {'owner': 'Dan Flippo', 'owner_email': 'test@nowhere.com'
        }, 'materialized': 'incremental', 'persist_docs': {}, 'quoting': {}, 'column_types': {}, 'full_refresh': None, 'on_schema_change': 'ignore', 'copy_grants': True, 'snowflake_warehouse': 'DFLIPPO_WH', 'transient': False, 'cluster_by': ['ROUND(L_ORDERKEY,
            -4)'
        ], 'unique_key': 'INTEGRATION_ID', 'post-hook': [
            {'sql': '{
                    { dbt_snow_mask.apply_masking_policy()
                    }
                }', 'transaction': True, 'index': None
            }
        ], 'pre-hook': []
    }, 'database': 'DFLIPPO_DEV', 'schema': 'DBT_DEMO', 'fqn': ['snowflake_demo', '30_presentation', 'FACT_ORDER_LINE'
    ], 'unique_id': 'model.snowflake_demo.FACT_ORDER_LINE', 'package_name': 'snowflake_demo', 'root_path': '/Users/dflippo/Documents/GitHub/snowflake-dbt-demo', 'path': '30_presentation/FACT_ORDER_LINE.sql', 'original_file_path': 'models/30_presentation/FACT_ORDER_LINE.sql', 'name': 'FACT_ORDER_LINE', 'alias': 'FACT_ORDER_LINE', 'checksum': {'name': 'sha256', 'checksum': 'df53c3674dbede943edaf1ff79931d6aaeb6a671c51a41b983e386a82876c91d'
    }, 'tags': ['Presentation_Layer'
    ], 'refs': [
        ['LKP_EXCHANGE_RATES'
        ]
    ], 'sources': [
        ['TPC_H', 'LINEITEM'
        ],
        ['TPC_H', 'ORDERS'
        ]
    ], 'description': 'Fact Order Lines', 'columns': {'L_ORDERKEY': {'name': 'L_ORDERKEY', 'description': 'FK to DIM_ORDERS and first key in PK', 'meta': {}, 'data_type': None, 'quote': None, 'tags': []
        }, 'L_LINENUMBER': {'name': 'L_LINENUMBER', 'description': 'Order Line Number and second key in PK', 'meta': {}, 'data_type': None, 'quote': None, 'tags': []
        }, 'INTEGRATION_ID': {'name': 'INTEGRATION_ID', 'description': 'Concatenation of PK colums for the unique and not_null tests', 'meta': {}, 'data_type': None, 'quote': None, 'tags': []
        }
    }, 'meta': {}, 'docs': {'show': True
    }, 'patch_path': 'snowflake_demo: //models/30_presentation/schema.yml', 'compiled_path': None, 'build_path': None, 'deferred': False, 'unrendered_config': {'meta': {'owner': 'Dan Flippo', 'owner_email': 'test@nowhere.com'}, 'post-hook': ['{{ dbt_snow_mask.apply_masking_policy() }}'], 'copy_grants': True, 'snowflake_warehouse': 'DFLIPPO_WH', 'materialized': 'incremental', 'tags': 'Presentation_Layer', 'unique_key': 'INTEGRATION_ID', 'transient': False, 'cluster_by': ['ROUND(L_ORDERKEY, -4)']}, 'created_at': 1647449969.797077}
    18: 08: 45  Test Parameters: {'to': "ref('DIM_CUSTOMERS')", 'field': 'C_CUSTKEY', 'column_name': 'O_CUSTKEY', 'model': "{{ get_where_subquery(ref('DIM_ORDERS')) }}"
    }